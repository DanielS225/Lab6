Git Intro 2 Activity
==================

A. Form teams
-------------

Form a 2-person team. Try to find someone who uses the same platform as you (e.g., Windows, Linux, etc.). If you can't, that's fine.
If you are the odd-person-out, join a team of 2 with permission of your TA.

Make a repo on GitHub.

Complete the exercises below, and fill in your answers in the spaces provided below each question.
Once you have completed all the exercises and filled in this file with your answers, 
add this file to your working directory (which you will create in section G) and push it to your team repo.
This file is the deliverable for this lab, so make sure you do not forget to push it at the end!

1.  List your team members below.

    Kaeini Ekong
	Daniel Schmidt


D. Getting help
---------------

Run the following commands.

    git help
    git help -ag
    git help init

1.  What does `git help` do?

    'git help' pulls up a series of common git commands categorized by type with descriptions of what they do.

2.  What does `-ag` cause `git help` to do?

    'git help -ag' gives a list of [all?] the available subcommands and concepts associated with git
	'git help init' opens the complete documentation for the 'git init' command

G. Basic commands
-----------------

Open the terminal. Navigate to your team’s repository directory.

Create a directory inside of your team repository which will act as your submission directory for this lab.
The directory should be named according to the last names of your team members following the format below.

    <member1LastName>_<member2LastName>_Lab6

Use a plain text editor to create `names.txt` inside the directory you just created.
Put the names of your team in the file. Save and exit.

Run `git status` before and after each of these commands.

    git add names.txt
    git commit –m “Add our names.”
    git log

1.  What kind of information does `git status` report?

    current branch, commits, and staged changes to be committed

2.  What does `git add names.txt` do?

    begins tracking the current version of names.txt

3.  What does `git commit -m "Add our names."` do?

    stages names.txt

Use a plain text editor to create the following files:

-   `birthdays.txt` - Put your birthdays in this file. (you are not obligated to use real information here)

-   `movies.txt` - Put the last movie each of you watched in alphabetical order.

Run `git status` before and after each of these commands.

    git add .
    git commit		Note:  Commit will open the vim editor; write a multi-line commit
						   message, save and quit (press esc and then type :wq).
    git log

4.  What does `git add .` do? What do you think `.` means?

    git add will track all files in the directory.
	the '.' is a place holder for a file name

5.  What does `git commit` (without -m) do?

    This forces the user to add a commit message
	Or, in my case, causes a "Vim: Caught deadly signal SEGV" error and fails the commit!

6.  If you want to write a more detailed commit message (which is
    good practice) what command would you use?

    'git commmit' would be better practice for adding a detailed message

7.  What does `git log do`?

    returns a list of all of the commits with their source, timedate, and commit message


H. Stage/Cache/Index
--------------------

Do the following:

-   Modify `names.txt` so that names are listed in *Last, First* format,
    one per line.

-   Modify `movies.txt` so they are in reverse alphabetical order
    by title.

-   Create a new file `foods.txt` that contains your favorite foods (one
    for each team member).

Run the following commands:

    git add names.txt
    git status

1.  Below write each file name under the state that its changes are
    currently in. Compose a definition for each state.

    **Staged**

    names.txt

    **Unstaged**

    movies.txt

    **Untracked**

    foods.txt

1.  If you run `git commit` what changes will be committed (***DON’T DO IT***)?

    only the changes to names.txt will be committed

2.  What command do you run to stage changes?

    git add

3.  What command do you run to unstage changes?

    git reset

Run the following commands:

    git diff
    git diff --cached

1.  What does `git diff` display?

    summarizes the differences between unstaged files and the versions of those files in the repository

2.  What does `git diff --cached` display?

    same as 'git diff' but for staged file(s)

3.  Formulate a sequence of commands to unstage changes to `names.txt`,
    and stage the changes to `movies.txt`. Write them here. Execute your commands and
    confirm they worked.

    git reset HEAD names.txt
	git add movies.txt

4.  Edit `movies.txt`, change any one of the movies, and save it. Then
    run `git status`. What do you observe? Explain what you think is
    going on.

    The version of movies.txt that existed when 'git add movies.txt' was run is still staged
	But, the new version of movies.txt is unstaged (it remains tracked).

5.  Delete `names.txt`. Then run `git status`. What do you observe?
    Explain what you think is going on.

    The unstaged changes include the deletion of names.txt.
	Only once that change is staged and committed will the repository reflect the deletion.

6.  Rename `movies.txt` to `last-movies`. Run `git status`. Observe
    and explain.

    movies.txt now appears as deleted in the unstaged changes.
	last-movies.txt appears as an untracked file.
	Because the file is defined as its path, being changed [outside of the command window?] means its identity to git is lost. 

7.  Formulate a sequence of commands to stage all changes including the
    untracked file and commit (with any reasonable message you like).
    Execute them.

    git add .
	git commit -m "Remove names, add foods, rename movies"

8.  In git vernacular, `index`, `cache`, and `stage` all refer to the
    same thing. What does it hold?

    The 'index'/'cache'/'stage' holds the files that are set to be committed. 

9.  Why have a `stage`? Why not just commit all changes since the last
    commit?

    the stage allows greater control in the pushed versionality.
	Only the desired

I. Undo
-------

Run the following commands:

    git log
    git status
    git reset --soft "HEAD^"
    git log
    git status

1.  What does `git reset --soft ``"HEAD^" `do?

    Undoes the previous commit, leaving all uncommitted files staged

Run the following commands:

    git commit –m "Redo."
    git log
    git status
    git reset --hard "HEAD^"
    git log
    git status

1.  What does `git reset --hard ``"HEAD^"`` `do?

    the hard reset outright undoes the changes, removing them from the repository and clearing the changes.

2.  What is the difference between `--hard` and `--soft`?

    Whether or not the changes are retained in some way at all.

3.  What do you think `HEAD` means?

    'HEAD' refers to the previous commit on the current branch.

4.  What do you think `HEAD^` means?

	'HEAD^' refers to the parent of the previous commit on the current branch.

5.  On Canvas, put two things: 1) a link to your repo (as a comment on the assignment), and 2) submit this document.

6. Push this document, completed, to your repo.

J. Helpful resources
--------------------

-   <https://git-scm.com/doc>

-   <https://www.atlassian.com/git/tutorials/>

-   github-git-cheat-sheet.pdf on class website

K. Copyright and Licensing
--------------------------

Adapted from:

Copyright 2016, Darci Burdge and Stoney Jackson SOME RIGHTS RESERVED

This work is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. To view a copy of this license, visit
<http://creativecommons.org/licenses/by-sa/4.0/> .
